// This file is auto-generated by @hey-api/openapi-ts

import {
	createClient,
	createConfig,
	type Options,
	urlSearchParamsBodySerializer,
} from "@hey-api/client-axios";
import type {
	GetApiData,
	GetApiResponse,
	GetInfoData,
	GetInfoResponse,
	GetCurrentUserData,
	GetCurrentUserResponse,
	GetUsersData,
	GetUsersResponse,
	PostUsersData,
	PostUsersResponse,
	DeleteUserData,
	DeleteUserResponse,
	GetUserData,
	GetUserResponse,
	PatchUserData,
	PatchUserResponse,
	PostUserData,
	PostUserResponse,
	PostUserActivityData,
	DeleteUserServerData,
	DeleteUserServerResponse,
	PostUserServerData,
	DeleteUserServerNameData,
	DeleteUserServerNameResponse,
	PostUserServerNameData,
	GetUserSharedData,
	GetUserSharedResponse,
	DeleteUserSharedServerData,
	DeleteUserSharedServerResponse,
	GetUserSharedServerData,
	GetUserSharedServerResponse,
	GetUserTokensData,
	GetUserTokensResponse,
	PostUserTokensData,
	PostUserTokensResponse,
	DeleteUserTokenData,
	DeleteUserTokenResponse,
	GetUserTokenData,
	GetUserTokenResponse,
	GetGroupsData,
	GetGroupsResponse,
	DeleteGroupData,
	DeleteGroupResponse,
	GetGroupData,
	GetGroupResponse,
	PostGroupData,
	PostGroupResponse,
	GetGroupSharedData,
	GetGroupSharedResponse,
	DeleteGroupSharedServerData,
	DeleteGroupSharedServerResponse,
	GetGroupSharedServerData,
	GetGroupSharedServerResponse,
	DeleteGroupUsersData,
	PostGroupUsersData,
	PostGroupUsersResponse,
	PutGroupPropertiesData,
	PutGroupPropertiesResponse,
	GetSharesOwnerData,
	GetSharesOwnerResponse,
	DeleteSharesServerData,
	DeleteSharesServerResponse,
	GetSharesServerData,
	GetSharesServerResponse,
	PatchSharesServerData,
	PatchSharesServerResponse,
	PostSharesServerData,
	PostSharesServerResponse,
	GetShareCodesOwnerData,
	GetShareCodesOwnerResponse,
	DeleteShareCodeData,
	DeleteShareCodeResponse,
	GetShareCodesServerData,
	GetShareCodesServerResponse,
	PostShareCodeData,
	PostShareCodeResponse,
	GetServicesData,
	GetServicesResponse,
	GetServiceData,
	GetServiceResponse,
	GetProxyData,
	GetProxyResponse,
	PatchProxyData,
	PostProxyData,
	PostAuthTokenData,
	PostAuthTokenResponse,
	GetAuthTokenData,
	GetAuthCookieData,
	GetAuthCookieResponse,
	GetOauthAuthorizeData,
	PostOauthTokenData,
	PostOauthTokenResponse,
	PostShutdownData,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Get JupyterHub version
 * This endpoint is not authenticated for the purpose of clients and user
 * to identify the JupyterHub version before setting up authentication.
 *
 */
export const getApi = <ThrowOnError extends boolean = false>(
	options?: Options<GetApiData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<GetApiResponse, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/",
			...options,
		},
	);
};

/**
 * Get detailed info about JupyterHub
 * Detailed JupyterHub information, including Python version,
 * JupyterHub's version and executable path,
 * and which Authenticator and Spawner are active.
 *
 */
export const getInfo = <ThrowOnError extends boolean = false>(
	options?: Options<GetInfoData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetInfoResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/info",
		...options,
	});
};

/**
 * Get current user
 * Returns the User model for the owner of the authenticating token.
 * Includes information about the requesting token itself,
 * such as the currently authorized scopes.
 *
 */
export const getCurrentUser = <ThrowOnError extends boolean = false>(
	options?: Options<GetCurrentUserData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetCurrentUserResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/user",
		...options,
	});
};

/**
 * List users
 */
export const getUsers = <ThrowOnError extends boolean = false>(
	options?: Options<GetUsersData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetUsersResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/users",
		...options,
	});
};

/**
 * Create multiple users
 */
export const postUsers = <ThrowOnError extends boolean = false>(
	options: Options<PostUsersData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		PostUsersResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/users",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Delete a user
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
	options: Options<DeleteUserData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		DeleteUserResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/users/{name}",
		...options,
	});
};

/**
 * Get a user by name
 */
export const getUser = <ThrowOnError extends boolean = false>(
	options: Options<GetUserData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetUserResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/users/{name}",
		...options,
	});
};

/**
 * Modify a user
 * Change a user's name or admin status
 */
export const patchUser = <ThrowOnError extends boolean = false>(
	options: Options<PatchUserData, ThrowOnError>,
) => {
	return (options?.client ?? client).patch<
		PatchUserResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/users/{name}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Create a single user
 */
export const postUser = <ThrowOnError extends boolean = false>(
	options: Options<PostUserData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		PostUserResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/users/{name}",
		...options,
	});
};

/**
 * Notify Hub of activity for a given user
 * Notify the Hub of activity by the user, e.g. accessing a service or (more likely) actively using a server.
 */
export const postUserActivity = <ThrowOnError extends boolean = false>(
	options: Options<PostUserActivityData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/users/{name}/activity",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Stop a user's server
 */
export const deleteUserServer = <ThrowOnError extends boolean = false>(
	options: Options<DeleteUserServerData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		DeleteUserServerResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/users/{name}/server",
		...options,
	});
};

/**
 * Start a user's single-user notebook server
 */
export const postUserServer = <ThrowOnError extends boolean = false>(
	options: Options<PostUserServerData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/users/{name}/server",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Stop a user's named server
 * To remove the named server in addition to deleting it,
 * the body may be a JSON dictionary with a boolean `remove` field:
 *
 * ```json
 * {"remove": true}
 * ```
 *
 */
export const deleteUserServerName = <ThrowOnError extends boolean = false>(
	options: Options<DeleteUserServerNameData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		DeleteUserServerNameResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/users/{name}/servers/{server_name}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Start a user's named server
 */
export const postUserServerName = <ThrowOnError extends boolean = false>(
	options: Options<PostUserServerNameData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/users/{name}/servers/{server_name}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * List servers shared with user
 * Returns list of Shares granting the user access to servers owned by others (new in 5.0)
 */
export const getUserShared = <ThrowOnError extends boolean = false>(
	options: Options<GetUserSharedData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetUserSharedResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/users/{name}/shared",
		...options,
	});
};

/**
 * Leave a shared server
 *
 * Revokes a user's access to a shared server by deleting.
 * Users generally have access to this endpoint for themselves.
 * (new in 5.0)
 *
 */
export const deleteUserSharedServer = <ThrowOnError extends boolean = false>(
	options: Options<DeleteUserSharedServerData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		DeleteUserSharedServerResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/users/{name}/shared/{owner}/{server_name}",
		...options,
	});
};

/**
 * Get user's shared access to server
 *
 * Gets the Share representing a single user's access to a single server.
 * Users generally have access to this endpoint for themselves.
 * (new in 5.0)
 *
 */
export const getUserSharedServer = <ThrowOnError extends boolean = false>(
	options: Options<GetUserSharedServerData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetUserSharedServerResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/users/{name}/shared/{owner}/{server_name}",
		...options,
	});
};

/**
 * List tokens for the user
 */
export const getUserTokens = <ThrowOnError extends boolean = false>(
	options: Options<GetUserTokensData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetUserTokensResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/users/{name}/tokens",
		...options,
	});
};

/**
 * Create a new token for the user
 * Creates a new token owned by the user.
 * Permissions can be limited by specifying a list of `scopes` in the JSON request body
 * (starting in JupyterHub 3.0; previously, permissions could be specified as `roles`,
 * which is deprecated in 3.0).
 *
 */
export const postUserTokens = <ThrowOnError extends boolean = false>(
	options: Options<PostUserTokensData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		PostUserTokensResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/users/{name}/tokens",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Delete (revoke) a token by id
 */
export const deleteUserToken = <ThrowOnError extends boolean = false>(
	options: Options<DeleteUserTokenData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		DeleteUserTokenResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/users/{name}/tokens/{token_id}",
		...options,
	});
};

/**
 * Get one token
 * Get the details for one token by id
 */
export const getUserToken = <ThrowOnError extends boolean = false>(
	options: Options<GetUserTokenData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetUserTokenResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/users/{name}/tokens/{token_id}",
		...options,
	});
};

/**
 * List groups
 */
export const getGroups = <ThrowOnError extends boolean = false>(
	options?: Options<GetGroupsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetGroupsResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/groups",
		...options,
	});
};

/**
 * Delete a group
 */
export const deleteGroup = <ThrowOnError extends boolean = false>(
	options: Options<DeleteGroupData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		DeleteGroupResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/groups/{name}",
		...options,
	});
};

/**
 * Get a group by name
 */
export const getGroup = <ThrowOnError extends boolean = false>(
	options: Options<GetGroupData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetGroupResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/groups/{name}",
		...options,
	});
};

/**
 * Create a group
 */
export const postGroup = <ThrowOnError extends boolean = false>(
	options: Options<PostGroupData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		PostGroupResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/groups/{name}",
		...options,
	});
};

/**
 * List servers shared with group
 * Lists shares granting `group` access to shared servers
 * (new in 5.0)
 *
 */
export const getGroupShared = <ThrowOnError extends boolean = false>(
	options: Options<GetGroupSharedData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetGroupSharedResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/groups/{name}/shared",
		...options,
	});
};

/**
 * Leave a share (group)
 * Leave a share by revoking a group's permissions on a single server
 * (new in 5.0)
 *
 */
export const deleteGroupSharedServer = <ThrowOnError extends boolean = false>(
	options: Options<DeleteGroupSharedServerData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		DeleteGroupSharedServerResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/groups/{name}/shared/{owner}/{server_name}",
		...options,
	});
};

/**
 * Get group's shared access
 * Get the Share representing a single group's access to a single server
 * (new in 5.0)
 *
 */
export const getGroupSharedServer = <ThrowOnError extends boolean = false>(
	options: Options<GetGroupSharedServerData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetGroupSharedServerResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/groups/{name}/shared/{owner}/{server_name}",
		...options,
	});
};

/**
 * Remove users from a group
 *
 * Body should be a JSON dictionary
 * where `users` is a list of usernames to remove from the groups.
 *
 * ```json
 * {
 * "users": ["name1", "name2"]
 * }
 * ```
 *
 */
export const deleteGroupUsers = <ThrowOnError extends boolean = false>(
	options: Options<DeleteGroupUsersData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/groups/{name}/users",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Add users to a group
 */
export const postGroupUsers = <ThrowOnError extends boolean = false>(
	options: Options<PostGroupUsersData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		PostGroupUsersResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/groups/{name}/users",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Set group properties
 * Set properties on a group
 * (new in 3.2)
 *
 */
export const putGroupProperties = <ThrowOnError extends boolean = false>(
	options: Options<PutGroupPropertiesData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		PutGroupPropertiesResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/groups/{name}/properties",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * List shares by owner
 * List shares granting access to any of owner's servers
 * (new in 5.0)
 *
 */
export const getSharesOwner = <ThrowOnError extends boolean = false>(
	options: Options<GetSharesOwnerData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetSharesOwnerResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/shares/{owner}",
		...options,
	});
};

/**
 * Revoke all shared access
 * Revoke all shared access to a given server
 * (new in 5.0)
 *
 */
export const deleteSharesServer = <ThrowOnError extends boolean = false>(
	options: Options<DeleteSharesServerData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		DeleteSharesServerResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/shares/{owner}/{server_name}",
		...options,
	});
};

/**
 * List server shares
 * List shares granting access to a single server
 * (new in 5.0)
 *
 */
export const getSharesServer = <ThrowOnError extends boolean = false>(
	options: Options<GetSharesServerData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetSharesServerResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/shares/{owner}/{server_name}",
		...options,
	});
};

/**
 * Revoke shared access
 * Revoke shared access to a single server for a single user or group.
 * If scopes are specified, only the specified scopes are revoked,
 * allowing the target user or group to retain partial access.
 * Revocation is idempotent - revoking a scope not held does not result in an error.
 * The resulting Share model is returned if any scopes remain.
 * (new in 5.0)
 *
 */
export const patchSharesServer = <ThrowOnError extends boolean = false>(
	options: Options<PatchSharesServerData, ThrowOnError>,
) => {
	return (options?.client ?? client).patch<
		PatchSharesServerResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/shares/{owner}/{server_name}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Grant shared access
 * Grant shared access to a single server
 * (new in 5.0)
 *
 */
export const postSharesServer = <ThrowOnError extends boolean = false>(
	options: Options<PostSharesServerData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		PostSharesServerResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/shares/{owner}/{server_name}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * List share codes by owner
 * List share codes granting access to a user's servers
 * (new in 5.0)
 *
 */
export const getShareCodesOwner = <ThrowOnError extends boolean = false>(
	options: Options<GetShareCodesOwnerData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetShareCodesOwnerResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/share-codes/{owner}",
		...options,
	});
};

/**
 * Revoke share code
 * Revoke a share code by id or code.
 * Exactly one of `id` or `code` must be specified.
 * (new in 5.0)
 *
 */
export const deleteShareCode = <ThrowOnError extends boolean = false>(
	options: Options<DeleteShareCodeData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		DeleteShareCodeResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/share-codes/{owner}/{server_name}",
		...options,
	});
};

/**
 * List share codes
 * List share codes which can be exchanged for access to a single server
 * (new in 5.0)
 *
 */
export const getShareCodesServer = <ThrowOnError extends boolean = false>(
	options: Options<GetShareCodesServerData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetShareCodesServerResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/share-codes/{owner}/{server_name}",
		...options,
	});
};

/**
 * Issue share code
 * Issue a share code, which can be exchanged for shared access to a single server
 * (new in 5.0)
 *
 */
export const postShareCode = <ThrowOnError extends boolean = false>(
	options: Options<PostShareCodeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		PostShareCodeResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/share-codes/{owner}/{server_name}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * List services
 */
export const getServices = <ThrowOnError extends boolean = false>(
	options?: Options<GetServicesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetServicesResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/services",
		...options,
	});
};

/**
 * Get a service by name
 */
export const getService = <ThrowOnError extends boolean = false>(
	options: Options<GetServiceData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetServiceResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/services/{name}",
		...options,
	});
};

/**
 * Get the proxy's routing table
 * A convenience alias for getting the routing table directly from the proxy
 */
export const getProxy = <ThrowOnError extends boolean = false>(
	options?: Options<GetProxyData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetProxyResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/proxy",
		...options,
	});
};

/**
 * Notify the Hub about a new proxy
 * Notifies the Hub of a new proxy to use.
 */
export const patchProxy = <ThrowOnError extends boolean = false>(
	options: Options<PatchProxyData, ThrowOnError>,
) => {
	return (options?.client ?? client).patch<unknown, unknown, ThrowOnError>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/proxy",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Force the Hub to sync with the proxy
 */
export const postProxy = <ThrowOnError extends boolean = false>(
	options?: Options<PostProxyData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/proxy",
		...options,
	});
};

/**
 * @deprecated
 * Request a new API token
 * Request a new API token to use with the JupyterHub REST API.
 * If not already authenticated, username and password can be sent
 * in the JSON request body.
 * Logging in via this method is only available when the active Authenticator
 * accepts passwords (e.g. not OAuth).
 *
 */
export const postAuthToken = <ThrowOnError extends boolean = false>(
	options?: Options<PostAuthTokenData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		PostAuthTokenResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/authorizations/token",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * @deprecated
 * Identify a user or service from an API token
 */
export const getAuthToken = <ThrowOnError extends boolean = false>(
	options: Options<GetAuthTokenData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/authorizations/token/{token}",
		...options,
	});
};

/**
 * @deprecated
 * Identify a user from a cookie
 * Used by single-user notebook servers to hand off cookie authentication to the Hub
 */
export const getAuthCookie = <ThrowOnError extends boolean = false>(
	options: Options<GetAuthCookieData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetAuthCookieResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/authorizations/cookie/{cookie_name}/{cookie_value}",
		...options,
	});
};

/**
 * OAuth 2.0 authorize endpoint
 * Redirect users to this URL to begin the OAuth process.
 * It is not an API endpoint.
 *
 */
export const getOauthAuthorize = <ThrowOnError extends boolean = false>(
	options: Options<GetOauthAuthorizeData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/oauth2/authorize",
		...options,
	});
};

/**
 * Request an OAuth2 token
 * Request an OAuth2 token from an authorization code.
 * This request completes the OAuth process.
 *
 */
export const postOauthToken = <ThrowOnError extends boolean = false>(
	options: Options<PostOauthTokenData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		PostOauthTokenResponse,
		unknown,
		ThrowOnError
	>({
		...urlSearchParamsBodySerializer,
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/oauth2/token",
		...options,
		headers: {
			"Content-Type": "application/x-www-form-urlencoded",
			...options?.headers,
		},
	});
};

/**
 * Shutdown the Hub
 */
export const postShutdown = <ThrowOnError extends boolean = false>(
	options?: Options<PostShutdownData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/shutdown",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};
